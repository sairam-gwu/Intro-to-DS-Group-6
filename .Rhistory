cnt
data <- cnt[order(cnt$cnt),decreasing=TRUE ]
# Create a bar graph in ascending order
ggplot(data, aes(x = reorder(Platform, -cnt), y = cnt,fill=Platform)) +
geom_bar(stat = "identity") +
labs(title = "Bar Graph Sorted in Ascending Order") +
xlab("Category") +
ylab("Frequency (Count)") +
theme_minimal()
games %>% group_by(Genre)
cnt<-games%>%group_by(Genre)%>%summarise(cnt=n())
cnt<- cnt%>%arrange(desc(cnt))
cnt
data <- cnt[order(cnt$cnt),decreasing=TRUE ]
# Create a bar graph in ascending order
ggplot(data, aes(x = reorder(Genre, -cnt), y = cnt,fill=Genre)) +
geom_bar(stat = "identity") +
labs(title = "Bar Graph Sorted in Ascending Order") +
xlab("Category") +
ylab("Frequency (Count)") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(games_final)+geom_bar(aes(x=Year_of_Release,fill=Year_of_Release))+theme(axis.text.x = element_text(angle = 45, hjust = 1))
ga<-games%>%group_by(Year_of_Release)%>%summarise(Global_Sales=mean(Global_Sales))
ga
cnt<- ga%>%arrange(desc(Global_Sales))
cnt
data <- cnt[order(cnt$Global_Sales),increasing=TRUE ]
ggplot(data, aes(x = reorder(Year_of_Release, Global_Sales), y = Global_Sales,fill=Year_of_Release)) +
geom_bar(stat = "identity") +
labs(title = "Bar Graph Sorted in Ascending Order") +
xlab("Category") +
ylab("Frequency (Count)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = games) +
geom_point(mapping = aes(x = Genre, y = NA_Sales))
ggplot(data = games) +
geom_point(mapping = aes(x = Genre, y = EU_Sales))
ggplot(data = games) +
geom_point(mapping = aes(x = Genre, y = Other_Sales))
ggplot(data = games) +
geom_point(mapping = aes(x = Genre, y = Global_Sales))
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
games<-read.csv('Video games sales.csv')
str(games)
games$Platform<-as.factor(games$Platform)
games$Year_of_Release<-as.factor(games$Year_of_Release)
games$Genre<-as.factor(games$Genre)
games$Publisher<-as.factor(games$Publisher)
games$Developer<-as.factor(games$Developer)
games$Rating<-as.factor(games$Rating)
str(games)
library(dplyr)
games<-na.omit(games)
unique(games$Rating)
games$Rating <- ifelse(games$Rating== "", NA,games$Rating )
unique(games$Rating)
games<-subset(games,games$Rating!="NA")
games<-subset(games,games$Year_of_Release!="N/A")
library(dplyr)
games%>%group_by(Platform)
cnt<-games%>%group_by(Platform)%>%summarise(cnt=n())
cnt<- cnt%>%arrange(desc(cnt))
cnt
data <- cnt[order(cnt$cnt),decreasing=TRUE ]
# Create a bar graph in ascending order
ggplot(data, aes(x = reorder(Platform, -cnt), y = cnt,fill=Platform)) +
geom_bar(stat = "identity") +
labs(title = "Bar Graph Sorted in Ascending Order") +
xlab("Category") +
ylab("Frequency (Count)") +
theme_minimal()
games %>% group_by(Genre)
cnt<-games%>%group_by(Genre)%>%summarise(cnt=n())
cnt<- cnt%>%arrange(desc(cnt))
cnt
data <- cnt[order(cnt$cnt),decreasing=TRUE ]
# Create a bar graph in ascending order
ggplot(data, aes(x = reorder(Genre, -cnt), y = cnt,fill=Genre)) +
geom_bar(stat = "identity") +
labs(title = "Bar Graph Sorted in Ascending Order") +
xlab("Category") +
ylab("Frequency (Count)") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust = 1))
ggplot(games_final)+geom_bar(aes(x=Year_of_Release,fill=Year_of_Release))+theme(axis.text.x = element_text(angle = 45, hjust = 1))
ga<-games%>%group_by(Year_of_Release)%>%summarise(Global_Sales=mean(Global_Sales))
ga
cnt<- ga%>%arrange(desc(Global_Sales))
cnt
data <- cnt[order(cnt$Global_Sales),increasing=TRUE ]
ggplot(data, aes(x = reorder(Year_of_Release, Global_Sales), y = Global_Sales,fill=Year_of_Release)) +
geom_bar(stat = "identity") +
labs(title = "Bar Graph Sorted in Ascending Order") +
xlab("Category") +
ylab("Frequency (Count)") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
ggplot(data = games) +
geom_point(mapping = aes(x = Genre, y = NA_Sales))
ggplot(data = games) +
geom_point(mapping = aes(x = Genre, y = EU_Sales))
ggplot(data = games) +
geom_point(mapping = aes(x = Genre, y = Other_Sales))
ggplot(data = games) +
geom_point(mapping = aes(x = Genre, y = Global_Sales))
qqnorm(games$Critic_Score,main="QQplot of Critic Score")
qqline(games$Critic_Score)
qqnorm(games$User_Score)
qqline(games$User_Score)
library(ezids)
new_games<-outlierKD2(games,User_Score,rm=TRUE,histogram=TRUE,qqplt=TRUE,boxplt = TRUE)
new_games
new_games<-outlierKD2(games,Critic_Score,rm=TRUE,histogram=TRUE,qqplt=TRUE,boxplt = TRUE)
new_games
new_games<-na.omit(new_games)
ggplot(new_games,aes(y=Critic_Score))+geom_boxplot(color = "blue", fill = "lightblue", alpha = 0.7)+labs(title="Boxplot Of Critic score")
ggplot(new_games,aes(x=Critic_Score))+geom_histogram(binwidth =5 ,fill='blue',color='black')+labs(title="Histogram Of Critic score",x='Critic_Score')
qqnorm(new_games$Critic_Score)
qqline(new_games$Critic_Score)
qqnorm(new_games$User_Score)
qqline(new_games$User_Score)
ggplot(new_games,aes(x=Critic_Score))+geom_histogram(bins=13)
ggplot(new_games,aes(x=User_Score))+geom_histogram(bins=13)
nrow(new_games$User_Score==0)
nrow(new_games$Critic_Score==0)
cnt<-new_games%>%group_by(Genre)%>%summarise(Total_Sales = sum(EU_Sales))
cnt<- cnt%>%arrange(desc(Total_Sales))
data <- cnt[order(cnt$Total_Sales),]
data
# Create a bar graph in ascending order
ggplot(data, aes(x = reorder(Genre, -Total_Sales), y = Total_Sales,fill=Genre)) +
geom_bar(stat = "identity") +
labs(x="platform")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
cnt<-new_games%>%group_by(Genre)%>%summarise(Total_Sales = sum(NA_Sales))
cnt<- cnt%>%arrange(desc(Total_Sales))
data <- cnt[order(cnt$Total_Sales),]
data
# Create a bar graph in ascending order
ggplot(data, aes(x = reorder(Genre, -Total_Sales), y = Total_Sales,fill=Genre)) +
geom_bar(stat = "identity") +
labs(x="platform")+
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(readr)
data<- read_csv("Data_without NAvalues.csv")
head(data)
# Summary of the dataset
summary(data)
# Structure of the dataset
str(data)
# Load necessary libraries
library(tidyverse)
library(ggplot2)
# Load your dataset
games <- read.csv('Data_without NAvalues.csv')
# 1. Sales Distribution by Region
games %>%
gather(key = "Region", value = "Sales", NA_Sales, EU_Sales, JP_Sales, Other_Sales) %>%
ggplot(aes(x = Sales)) +
geom_histogram(bins = 30, fill = "blue", color = "black") +
facet_wrap(~Region, scales = "free") +
theme_minimal() +
ggtitle("Distribution of Game Sales by Region")
# 2. Top Games by Region (example for NA Sales)
top_games_na <- games %>%
group_by(Name) %>%
summarize(Total_NA_Sales = sum(NA_Sales)) %>%
arrange(desc(Total_NA_Sales)) %>%
top_n(10)
ggplot(top_games_na, aes(x = reorder(Name, Total_NA_Sales), y = Total_NA_Sales)) +
geom_bar(stat = "identity", fill = "orange") +
coord_flip() +
theme_minimal() +
ggtitle("Top 10 Games by Sales in North America")
# You can replicate the above process for EU, JP, and Other regions
# 3. Geographical Variation in Sales (more advanced visualizations might be needed)
# 4. Influence of Game Features on Sales
games %>%
group_by(Genre) %>%
summarize(Total_Global_Sales = sum(Global_Sales)) %>%
ggplot(aes(x = reorder(Genre, Total_Global_Sales), y = Total_Global_Sales)) +
geom_bar(stat = "identity", fill = "green") +
coord_flip() +
theme_minimal() +
ggtitle("Global Sales by Game Genre")
# Correlation between Critic Score and Global Sales
ggplot(games, aes(x = Critic_Score, y = Global_Sales)) +
geom_point(alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE, color = "red") +
theme_minimal() +
ggtitle("Critic Score vs Global Sales")
# Reshape data to long format for regional analysis
games_long <- games %>%
gather(key = "Region", value = "Sales", NA_Sales, EU_Sales, JP_Sales, Other_Sales)
# Correlation between Critic Score and Sales by Region
ggplot(games_long, aes(x = Critic_Score, y = Sales)) +
geom_point(aes(color = Region), alpha = 0.5) +
geom_smooth(method = "lm", se = FALSE) +
theme_minimal() +
ggtitle("Critic Score vs Sales by Region")
# Aggregate sales by region and year
annual_sales_by_region <- games %>%
mutate(Year_of_Release = as.numeric(Year_of_Release)) %>%
group_by(Year_of_Release) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE),
JP_Sales = sum(JP_Sales, na.rm = TRUE),
Other_Sales = sum(Other_Sales, na.rm = TRUE)
)
# Plotting annual sales trends by region
ggplot(annual_sales_by_region, aes(x = Year_of_Release)) +
geom_line(aes(y = NA_Sales, color = "NA")) +
geom_line(aes(y = EU_Sales, color = "EU")) +
geom_line(aes(y = JP_Sales, color = "JP")) +
geom_line(aes(y = Other_Sales, color = "Other")) +
labs(color = "Region", y = "Sales", title = "Annual Sales Trend by Region") +
theme_minimal()
# Identifying top-selling games globally
top_global_games <- games %>%
group_by(Name) %>%
summarise(Total_Global_Sales = sum(Global_Sales, na.rm = TRUE)) %>%
arrange(desc(Total_Global_Sales)) %>%
head(10)
# Analyzing characteristics of top-selling games
games %>%
filter(Name %in% top_global_games$Name) %>%
group_by(Name, Genre, Platform) %>%
summarise(Total_Global_Sales = sum(Global_Sales, na.rm = TRUE), .groups = 'drop') %>%
arrange(desc(Total_Global_Sales))
# Correlation analysis
correlation_matrix <- cor(games[, c("NA_Sales", "EU_Sales", "JP_Sales", "Other_Sales", "Critic_Score", "User_Score")], use = "complete.obs")
# Simple linear regression example
lm_model <- lm(Global_Sales ~ Critic_Score + User_Score, data = games)
summary(lm_model)
library(plotly)
# Interactive scatter plot
p <- ggplot(games, aes(x = Critic_Score, y = Global_Sales)) +
geom_point(aes(text = paste("Name:", Name)), size = 2, alpha = 0.7) +
theme_minimal()
ggplotly(p, tooltip = "text")
# T-test example
t.test(games$NA_Sales, games$EU_Sales)
# Load necessary libraries
library(dplyr)
library(ggplot2)
library(tidyr) # Make sure it's loaded for pivot_longer
top_games_by_region <- function(data, region, n = 10) {
data %>%
group_by(Name) %>%
summarise(Total_Sales = sum(get(region), na.rm = TRUE)) %>%
top_n(n, Total_Sales) %>%
ungroup() %>%
arrange(desc(Total_Sales))
}
# Example for North America
top_na_games <- top_games_by_region(games, "NA_Sales")
# Analyzing cross-regional sales for top NA games
cross_regional_sales <- function(top_games, data) {
data %>%
filter(Name %in% top_games$Name) %>%
select(Name, NA_Sales, EU_Sales, JP_Sales, Other_Sales) %>%
pivot_longer(cols = c(NA_Sales, EU_Sales, JP_Sales, Other_Sales),
names_to = "Region", values_to = "Sales") %>%
arrange(Name, Region)
}
# Example for top NA games
top_na_games_sales <- cross_regional_sales(top_na_games, games)
# Visualizing the sales of top NA games in all regions
ggplot(top_na_games_sales, aes(x = Name, y = Sales, fill = Region)) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(title = "Sales of Top NA Games in Each Region", x = "Game", y = "Sales")
# Identify top-selling games in the JP region
top_jp_games <- top_games_by_region(games, "JP_Sales")
# Identify top-selling games in the Other region
top_other_games <- top_games_by_region(games, "Other_Sales")
# Analyze cross-regional sales for top EU games
top_eu_games_sales <- cross_regional_sales(top_eu_games, games)
library(dplyr)
library(ggplot2)
library(gghighlight)
library(tidyr)
library(ggrepel)
# Assuming 'games' is your dataset
games$Year_of_Release <- as.numeric(as.character(games$Year_of_Release))
# Aggregate sales by year and region
yearly_sales <- games %>%
group_by(Year_of_Release) %>%
summarise(
NA_Sales = sum(NA_Sales, na.rm = TRUE),
EU_Sales = sum(EU_Sales, na.rm = TRUE)
) %>%
ungroup()
best_selling_games <- games %>%
group_by(Year_of_Release) %>%
summarise(
Best_Selling_NA = Name[which.max(NA_Sales)],
Best_Selling_EU = Name[which.max(EU_Sales)]
) %>%
ungroup()
yearly_sales_long <- yearly_sales %>%
pivot_longer(
cols = -Year_of_Release,
names_to = "Region",
values_to = "Sales"
)
# Pivot the best_selling_games to long format
best_selling_games_long <- best_selling_games %>%
pivot_longer(
cols = starts_with("Best_Selling_"),
names_to = "Region",
values_to = "Game_Name",
names_prefix = "Best_Selling_"
) %>%
mutate(Region = sub("NA", "NA_Sales", Region)) %>%
mutate(Region = sub("EU", "EU_Sales", Region))
best_selling_games_with_sales <- yearly_sales_long %>%
left_join(best_selling_games_long, by = c("Year_of_Release", "Region"))
# Create the plot
sales_plot <- ggplot(yearly_sales_long, aes(x = Year_of_Release, y = Sales, color = Region)) +
geom_line() +
geom_point() +
theme_minimal()
highlighted_plot <- sales_plot +
geom_text_repel(
data = best_selling_games_with_sales,
aes(label = Game_Name, x = Year_of_Release, y = Sales),
box.padding = 0.35,
max.overlaps = Inf
) +
labs(title = "Annual Sales by Region with Best-Selling Game Highlighted (NA and EU)")
print(highlighted_plot)
library(dplyr)
library(ggplot2)
library(tidyr)
library(ggrepel)
games$Year_of_Release <- as.numeric(as.character(games$Year_of_Release))
ear
library(dplyr)
library(ggplot2)
library(tidyr)
library(ggrepel)
games$Year_of_Release <- as.numeric(as.character(games$Year_of_Release))
na_sales <- games %>%
group_by(Year_of_Release, Genre) %>%
summarise(NA_Sales = sum(NA_Sales, na.rm = TRUE)) %>%
ungroup()
na_best_selling_genres <- na_sales %>%
arrange(desc(NA_Sales)) %>%
group_by(Year_of_Release) %>%
slice(1) %>%
ungroup()
# Create a bar plot for NA region only with each genre a different color
na_genre_sales_plot <- ggplot(na_best_selling_genres, aes(x = Year_of_Release, y = NA_Sales, fill = Genre)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
scale_fill_brewer(palette = "Set3") +
labs(title = "NA Annual Sales with Best-Selling Genre Highlighted", x = "Year of Release", y = "Sales") +
theme(legend.title = element_blank())
print(na_genre_sales_plot)
library(dplyr)
library(ggplot2)
library(tidyr)
library(ggrepel)
games$Year_of_Release <- as.numeric(as.character(games$Year_of_Release))
eu_sales <- games %>%
group_by(Year_of_Release, Genre) %>%
summarise(EU_Sales = sum(EU_Sales, na.rm = TRUE)) %>%
ungroup()
eu_best_selling_genres <- eu_sales %>%
arrange(desc(EU_Sales)) %>%
group_by(Year_of_Release) %>%
slice(1) %>%
ungroup()
eu_genre_sales_plot <- ggplot(eu_best_selling_genres, aes(x = Year_of_Release, y = EU_Sales, fill = Genre)) +
geom_bar(stat = "identity", position = "dodge") +
theme_minimal() +
scale_fill_brewer(palette = "Set3") +
labs(title = "EU Annual Sales with Best-Selling Genre Highlighted", x = "Year of Release", y = "Sales") +
theme(legend.title = element_blank())
print(eu_genre_sales_plot)
library(readr)
library(dplyr)
data <- read_csv("Data_without NAvalues.csv")
View(Data_without_NAvalues)
# Load the necessary library
# Convert "Global Sales" into a binary variable
# Defining 'success' as sales greater than the median sales
median_sales <- median(data$Global_Sales)
data$Success <- ifelse(data$Global_Sales > median_sales, 1, 0)
# Perform logistic regression
model <- glm(Success ~User_Score, data=data, family="binomial")
# Summary of the model
summary(model)
# Load necessary libraries
library(dplyr)
library(pROC)
library(caret)
# Convert "Global Sales" into a binary variable
median_sales <- median(data$Global_Sales)
data$Success <- ifelse(data$Global_Sales > median_sales, 1, 0)
# Perform logistic regression
model <- glm(Success ~  NA_Sales+EU_Sales, data=data, family="binomial")
# Make predictions
predictions <- predict(model, type = "response")
# Convert predictions to binary based on threshold (e.g., 0.5)
predicted_classes <- ifelse(predictions > 0.5, 1, 0)
# Confusion Matrix
conf_matrix <- confusionMatrix(as.factor(predicted_classes), as.factor(data$Success))
print(conf_matrix)
# ROC Curve
roc_curve <- roc(data$Success, predictions)
plot(roc_curve, main="ROC Curve")
auc(roc_curve)
# Perform linear regression
model <- lm(Global_Sales ~ Critic_Score + User_Score, data=data)
# Summary of the model
summary(model)
#
# Perform linear regression with additional predictors
model_enhanced <- lm(Global_Sales ~  NA_Sales + EU_Sales + JP_Sales + Other_Sales,
data=data)
# Summary of the enhanced model
summary(model_enhanced)
# Loop through each genre and perform linear regression
genres <- unique(data$Genre)
for (genre in genres) {
# Subset the data for the specific genre
genre_data <- subset(data, Genre == genre)
# Perform linear regression
model <- lm(Global_Sales ~ Critic_Score + User_Score, data=genre_data)
# Output the genre and summary of the model
cat("\nLinear Regression Model for Genre:", genre, "\n")
print(summary(model))
}
install.packages("rpart")
install.packages("rpart.plot")
install.packages("rpart")
# Load necessary libraries
library(dplyr)
library(caret)
library(rpart)
install.packages("rpart")
install.packages("rpart")
install.packages("rpart.plot")
knitr::opts_chunk$set(echo = TRUE)
# Load necessary libraries
library(dplyr)
library(caret)
library(rpart)
library(rpart.plot)
# Define 'hit' games based on a threshold
hit_threshold <- quantile(data$Global_Sales, 0.75)
data$Hit <- ifelse(data$Global_Sales > hit_threshold, 1, 0)
# Convert necessary columns to factors
data$Platform <- as.factor(data$Platform)
data$Genre <- as.factor(data$Genre)
data$Year_of_Release <- as.factor(data$Year_of_Release)
# List of unique genres
genres <- unique(data$Genre)
# Loop through each genre and fit a decision tree model
for (genre in genres) {
cat("\nDecision Tree Model for Genre:", genre, "\n")
# Subset the data for the specific genre
genre_data <- subset(data, Genre == genre)
# Split data into training and testing sets
set.seed(123) # for reproducibility
index <- createDataPartition(genre_data$Hit, p = 0.8, list = FALSE)
train_data <- genre_data[index, ]
test_data <- genre_data[-index, ]
# Fit a decision tree model
tree_model <- rpart(Hit ~ Critic_Score + User_Score + Platform + Year_of_Release,
data = train_data,
method = "class",
control = rpart.control(minsplit = 20, cp = 0.01))
# Plot the decision tree
rpart.plot(tree_model, type = 4, extra = 102, under = TRUE, faclen = 0)
}
library(rpart)
library(rpart.plot)
tree_model <- rpart(Hit ~ Critic_Score + User_Score + Platform + Genre,
data = train_data,
method = "class",
control = rpart.control(minsplit = 20, cp = 0.01))
rpart.plot(tree_model, type = 4, extra = 102, under = TRUE, faclen = 0)
install.packages("rpart")
install.packages("rpart.plot")
# Load necessary libraries
library(dplyr)
library(caret)
library(rpart)
library(rpart.plot)
# Assuming 'data' is your dataset
# Define 'hit' games based on a threshold (e.g., games with sales above the 75th percentile)
hit_threshold <- quantile(data$Global_Sales, 0.75)
data$Hit <- ifelse(data$Global_Sales > hit_threshold, 1, 0)
# Convert factors if necessary
data$Platform <- as.factor(data$Platform)
data$Genre <- as.factor(data$Genre)
data$Year_of_Release <- as.factor(data$Year_of_Release) # Treat as categorical
# Split data into training and testing sets
set.seed(123) # for reproducibility
index <- createDataPartition(data$Hit, p = 0.8, list = FALSE)
train_data <- data[index, ]
test_data <- data[-index, ]
# Fit a decision tree model
tree_model <- rpart(Hit ~ Critic_Score + User_Score + Platform + Genre + Year_of_Release,
data = train_data, method = "class")
# Plot the decision tree
rpart.plot(tree_model)
install.packages("rpart.plot")
install.packages("rpart")
