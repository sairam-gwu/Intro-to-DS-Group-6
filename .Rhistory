4+3
print(4)
print("Hello World")
3+4
cars
iris
summary(iris)
data=iris
data
View(data)
View(data)
data= iris
dim(data)
rm(list<-ls())
summary(cars)
plot(cars)
plot(iris)
?lm
?ls
?rm
install.packages("foreign")
library(foreign)
install.packages("devtools")
devtools::install_github('physicsland/ezids')
library(ezids)
?xkablessummary
?xkablesummary
xkablesummary(iris)
library(ezids)
?ezids
??ezids
gc()
library(readxl)
BaseballHeightWeight <- read_excel("C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW3/BaseballHeightWeight.csv")
install.packages("ezids")
install.packages("kableExtra")
install.packages("kableExtra")
library(ezids)
library(testst)
library(kableExtra)
update.packages()
library(ezids)
library(ggplot2)
df = read.csv('C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW3')
library(ezids)
library(ggplot2)
df = read.csv('C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW3/BaseballHeightWeight')
library(ezids)
library(ggplot2)
df = read.csv('C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW3/BaseballHeightWeight.csv')
df
View(df)
View(df)
head(df)
tail(df,3)
head(df,5)
names(df)[names(df) == "weight.pounds"] <- "weight"
names(df)[names(df) == "Height.inches"] <- "height"
names(df)[names(df) == "Age"] <- "age"
colnames(df)
colnames(df)
colnames(df)
colnames(df[4:6])=c("height","weight","age")
colnames(df)
colnames(df[4:6])<-c("height","weight","age")
colnames(df)
colnames(df(c[4:6])<-c("height","weight","age")
colnames(df)
colnames(df(c[4:6]))=c("height","weight","age")
colnames(df)[4:6] <- c("height", "weight", "age")
colnames(df)
head(df,2)
xkablesummary(df)
?xkablesummary
xkablesummary(df, title="Five number summary", pos="left", bso="hover"  )
xkablesummary(df[4,6], title="Five number summary", pos="left", bso="hover"  )
xkablesummary(df[4:6], title="Five number summary", pos="left", bso="hover"  )
xkablesummary(df[4:6], title = "Five number summary", position = "left", border = "hover")
xkablesummary(df[4:6], title = "Five number summary")
summary(df)
summary(df[4:6])
str(df)
#xkablesummary(df[4:6], title = "Five number summary")
summary(df[4:6])
baseball = read.csv('C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW3/BaseballHeightWeight.csv')
baseball
str(baseball)
head(baseball,5)
tail(baseball,3)
colnames(baseball)
colnames(baseball)[4:6] <- c("height", "weight", "age")
colnames(baseball)
head(baseball,2)
#xkablesummary(baseball[4:6], title = "Five number summary")
summary(baseball[4:6])
is.na(baseball)
anomalies=subset(baseball,is.na(baseball))
View(anomalies)
View(anomalies)
summary(baseball)
is.na(baseball)
na_weight <- is.na(baseball['weight'])
anomalies <- subset(baseball, na_weight)
print(anomalies
print(anomalies)
anomalies
new_baseball<-subset(baseball, !na_weight)
new_baseball
summary(new_baseball)
#boxplot
boxplot(new_baseball['weight'])
boxplot(new_baseball['weight'])
title(main = "Boxplot of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
title(main = "Boxplot of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
boxplot(new_baseball['weight'],col="orange")
title(main = "Boxplot of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
boxplot(new_baseball['weight'],col="orange")
title(main = "Boxplot of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
ylab("Weight in pounds")
title(main = "Boxplot of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
ylab("Weight in pounds")
# boxplot
boxplot(new_baseball['weight'],col="orange",ylab="Weight in pounds")
title(main = "Boxplot of Player Weights")
legend("topright", legend = "Weight", fill = "orange")000
boxplot(new_baseball['weight'],col="orange",ylab="Weight in pounds")
title(main = "Boxplot of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
ggplot(new_baseball['weight'],col="orange",ylab="Weight in pounds")
title(main = "Boxplot of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
ggplot(new_baseball['weight'])
ggplot(new_baseball['weight'])
?ggplot
ggplot(data=new_baseball['weight'])
?ggplot
ggplot(data=new_baseball['weight'])
ggplot(data = new_baseball, aes(y = weight)) +
geom_boxplot(fill = "orange") +
labs(title = "Boxplot of Player Weights",
x = "X-Axis Label",
y = "Y-Axis Label") +
theme_minimal()
ggplot(data = new_baseball, aes(y = weight)) +
geom_boxplot(fill = "orange") +
labs(title = "Boxplot of Player Weights",
x = "X-Axis Label",
y = "Y-Axis Label")
ggplot(data = new_baseball, aes(y = weight)) +
geom_boxplot(fill = "orange") +
labs(title = "Boxplot of Player Weights",
y = "Weight in Pounds")
# histogram
hist(new_baseball['weight'],col="orange",ylab="Weight in pounds")
# histogram
hist(new_baseball['weight'], col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
hist(new_baseball['weight'], col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
# histogram
new_baseball$weight <- as.numeric(new_baseball$weight)
hist(new_baseball['weight'], col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
#using ggplot
ggplot(data = new_baseball, aes(y = weight)) +
geom_histogram(fill = "orange") +
labs(title = "Boxplot of Player Weights",
y = "Weight in Pounds")
ggplot(data = new_baseball, aes(x = weight)) +
geom_histogram(fill = "orange") +
labs(title = "Histogram of Player Weights",
y = "Weight in Pounds",x="Frequency")
ggplot(data = new_baseball, aes(x = weight),bins=14) +
geom_histogram(fill = "orange") +
labs(title = "Histogram of Player Weights",
y = "Weight in Pounds",x="Frequency")
ggplot(data = new_baseball, aes(x = weight)) +
geom_histogram(fill = "orange",bins=14) +
labs(title = "Histogram of Player Weights",
y = "Weight in Pounds",x="Frequency")
# histogram
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
title(main = "Histogram of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
#using ggplot
ggplot(data = new_baseball, aes(x = weight)) +
geom_histogram(fill = "orange",bins=14) +
labs(title = "Histogram of Player Weights",
y = "Weight in Pounds",x="Frequency")
# histogram
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
title(main = "Histogram of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
#using ggplot
ggplot(data = new_baseball, aes(x = weight)) +
geom_histogram(fill = "orange",bins=14) +
labs(title = "Histogram of Player Weights",
y = "Weight in Pounds",x="Frequency")
# histogram
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
title(main = "Histogram of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
# histogram
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
title(main = "Histogram of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
# histogram
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
title(main = "Histogram of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
#using ggplot
ggplot(data = new_baseball, aes(x = weight)) +
geom_histogram(fill = "orange",bins=14) +
labs(title = "Histogram of Player Weights",
y = "Weight in Pounds",x="Frequency")
library(ezids)
library(ggplot2)
baseball = read.csv('C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW3/BaseballHeightWeight.csv')
baseball
str(baseball)
head(baseball,5)
tail(baseball,3)
colnames(baseball)
colnames(baseball)[4:6] <- c("height", "weight", "age")
colnames(baseball)
head(baseball,2)
#xkablesummary(baseball[4:6], title = "Five number summary")
summary(baseball[4:6])
na_weight <- is.na(baseball['weight'])
anomalies <- subset(baseball, na_weight)
anomalies
new_baseball<-subset(baseball, !na_weight)
new_baseball
summary(new_baseball)
# boxplot
boxplot(new_baseball['weight'],col="orange",ylab="Weight in pounds")
title(main = "Boxplot of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
#using ggplot
ggplot(data = new_baseball, aes(y = weight)) +
geom_boxplot(fill = "orange") +
labs(title = "Boxplot of Player Weights",
y = "Weight in Pounds")
# histogram
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
title(main = "Histogram of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
#using ggplot
ggplot(data = new_baseball, aes(x = weight)) +
geom_histogram(fill = "orange",bins=14) +
labs(title = "Histogram of Player Weights",
y = "Weight in Pounds",x="Frequency")
View(baseball)
#scatter plot bw height and weight
ggplot(data = new_baseball, aes(x = weight,y=height,color=team)) +
geom_scatter(fill = "orange",bins=14) +
labs(title = "Scatter plot of player Height vs Weight",
y = "Weight in Pounds",x="Height in Inches")
eight and weight
#scatter plot bw height and weight
ggplot(data = new_baseball, aes(x = weight,y=height,color=team)) +
geom_scatterplot(fill = "orange",bins=14) +
labs(title = "Scatter plot of player Height vs Weight",
y = "Weight in Pounds",x="Height in Inches")
#scatter plot bw height and weight
ggplot(data = new_baseball, aes(x = weight, y = height, color = team)) +
geom_point() +
labs(title = "Scatter plot of Player Height vs Weight",
x = "Weight in Pounds",
y = "Height in Inches")
View(new_baseball)
#scatter plot bw height and weight
ggplot(data = new_baseball, aes(x = weight, y = height, color = Team)) +
geom_point() +
labs(title = "Scatter plot of Player Height vs Weight",
x = "Weight in Pounds",
y = "Height in Inches")
count(new_baseball$Team)
summary(new_baseball$Team)
#scatter plot bw height and weight
ggplot(data = new_baseball, aes(x = weight, y = height, color = Team)) +
geom_point() +
labs(title = "Scatter plot of Player Weight vs Height",
x = "Weight in Pounds",
y = "Height in Inches")
#scatter plot bw height and weight
ggplot(data = new_baseball, aes(y = weight, x = height, color = Team)) +
geom_point() +
labs(title = "Scatter plot of Player Height vs Weight",
y = "Weight in Pounds",
x = "Height in Inches")
corr(new_baseball$height,new_baseball$weight)
cor(new_baseball$height,new_baseball$weight)
#scatter plot bw height and weight colored by age
ggplot(data = new_baseball, aes(y = weight, x = height, color = age)) +
geom_point() +
labs(title = "Scatter plot of Player Height vs Weight",
y = "Weight in Pounds",
x = "Height in Inches")
View(new_baseball)
wash_players=subset(new_baseball,new_baseball$Team='WAS')
wash_players <- subset(new_baseball, Team == 'WAS')
head(wash_players, 10)
wash_28 <-subset(new_baseball,Team=='Was',age>28)
head(wash_28,10)
wash_28 <-subset(new_baseball,Team=='Was',age>18)
head(wash_28,10)
wash_28 <- subset(new_baseball, Team == 'WAS' & age > 28)
head(wash_28,10)
print(nrow(wash_28))
wash_28 <- subset(new_baseball, Team == 'WAS' & age > 28)
head(wash_28,10)
print(nrow(wash_28))
# Question 5: Summary statistics.
**We can use the summary function to give us an overview of the summary statistics in the data frame**
# histogram
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency",title = "Histogram of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
View(wash_28)
View(baseball)
library(devtools)
devtools::install_github("physicsland/ezids")
remove.packages("ezids")
devtools::install_github("physicsland/ezids")
devtools::install_github("physicsland/ezids")
devtools::install_github("physicsland/ezids")
remove.packages(ezids)
devtools::install_github("physicsland/ezids")
devtools::install_github("physicsland/ezids")
library(ezids)
ezids
?ezids
??ezids
library(ezids)
devtools::install_github("physicsland/ezids")
1.3/root(10)
1.3/sqrt(10)
# Some of common RMD options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, message = F)
# Can globally set option for number display format.
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
titanic=read.csv("C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW8/Titanic.csv")
titanic=read.csv("C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW9/Titanic.csv")
str(titanic)
descrive(titanic)
titanic=read.csv("C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW9/Titanic.csv")
str(titanic)
describe(titanic)
titanic=read.csv("C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW9/Titanic.csv")
str(titanic)
summary(titanic)
cat(sum(is.na(titanic$age))
cat(sum(is.na(titanic$age)))
View(titanic)
titanic.columns
titanic.columns()
titanic$columns
colnames(titanic)
install.packages(c("caret", "pROC", "e1071"))
predictions
predictions <- predict(model, newdata = titanic, type = "response")
model <- glm(survived ~ age + pclass, data = titanic, family = binomial)
summary(model)
predictions <- predict(model, newdata = titanic, type = "response")
# Convert predicted probabilities to binary (0 or 1)
predicted_class <- ifelse(predictions > 0.5, 1, 0)
# Create confusion matrix
conf_matrix <- confusionMatrix(data = predicted_class, reference = titanic$survived)
library(ezids)
library(ggplot2)
library(caret)
library(pROC)
library(e1071)
titanic=read.csv("C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW9/Titanic.csv")
titanic<-subset(titanic, !is.na(age))
titanic$survived <- factor(titanic$survived)
titanic$pclass <- factor(titanic$pclass)
titanic$sex <- factor(titanic$sex)
titanic$sibsp <- factor(titanic$sibsp)
titanic$parch <- factor(titanic$parch)
titanic$embarked <- factor(titanic$embarked)
model <- glm(survived ~ age + pclass, data = titanic, family = binomial)
summary(model)
predictions <- predict(model, newdata = titanic, type = "response")
# Convert predicted probabilities to binary (0 or 1)
predicted_class <- ifelse(predictions > 0.5, 1, 0)
# Create confusion matrix
conf_matrix <- confusionMatrix(data = predicted_class, reference = titanic$survived)
View(titanic)
predicted_class <- factor(predicted_class, levels = levels(factor(titanic$survived)))
conf_matrix <- confusionMatrix(data = predicted_class, reference = titanic$survived)
# Display confusion matrix
print(conf_matrix)
# Calculate F1 score
f1_score <- posPredValue(conf_matrix) * sensitivity(conf_matrix) * 2 / (posPredValue(conf_matrix) + sensitivity(conf_matrix))
View(conf_matrix)
View(conf_matrix)
View(conf_matrix)
View(conf_matrix)
View(model)
View(conf_matrix)
conf_matrix[1,1]
View(conf_matrix)
conf_matrix$table[1,1]
library(ezids)
library(ggplot2)
library(dplyr)
library(tidyr)
games=read.csv("Video games sales.csv")
setwd("C:/Users/saira/OneDrive/Documents/GitHub/Intro-to-DS-Group-6")
library(ezids)
library(ggplot2)
library(dplyr)
library(tidyr)
games=read.csv("Video games sales.csv")
head(games,5)
games<-na.omit(games)
unique(games$Rating)
games$Rating <- ifelse( games$Rating== "", NA,games$Rating )
unique(games$Rating)
games<-subset(games,games$Rating!="NA")
games<-subset(games,games$Year_of_Release!="N/A")
nrow(games)
outlierKD2(games,Global_Sales,rm=FALSE,hist=TRUE,boxplt=TRUE,qqplt=TRUE)
games_final= outlierKD2(games,Global_Sales,rm=TRUE,hist=FALSE)
games_final<-na.omit(games_final)
library(reshape2)
games_final_long <- melt(games_final, id.vars = 'year_of_release', measure.vars = c('NA_Sales', 'JP_Sales', 'EU_Sales'))
View(games_final)
View(games_final)
games_final_long <- melt(games_final, id.vars = 'Year_of_Release', measure.vars = c('NA_Sales', 'JP_Sales', 'EU_Sales'))
# Plot the sales data
ggplot(games_final_long, aes(x = Year_of_Release, y = value, color = variable)) +
geom_line() +
labs(title = 'Sales by Region Over Time',
x = 'Year of Release',
y = 'Sales',
color = 'Region') +
theme_minimal()
library(reshape2)
agg_data <- games_final %>%
group_by(Year_of_Release) %>%
summarise(NA_Sales = sum(NA_Sales), JP_Sales = sum(JP_Sales), EU_Sales = sum(EU_Sales))
# Melt the aggregated dataframe to long format
agg_data_long <- melt(agg_data, id.vars = 'Year_of_Release', measure.vars = c('NA_Sales', 'JP_Sales', 'EU_Sales'))
# Plot the aggregated sales data
ggplot(agg_data_long, aes(x = Year_of_Release, y = value, color = variable)) +
geom_line() +
labs(title = 'Total Sales by Region Over Time',
x = 'Year of Release',
y = 'Total Sales',
color = 'Region') +
theme_minimal()
agg_data <- games_final %>%
group_by(Year_of_Release) %>%
summarise(NA_Sales = sum(NA_Sales), JP_Sales = sum(JP_Sales), EU_Sales = sum(EU_Sales))
# Melt the aggregated dataframe to long format
agg_data_long <- tidyr::gather(agg_data, key = 'Region', value = 'Sales', -Year_of_Release)
# Plot the aggregated sales data
ggplot(agg_data_long, aes(x = Year_of_Release, y = Sales, color = Region, group = Region)) +
geom_line() +
labs(title = 'Total Sales by Region Over Time',
x = 'Year of Release',
y = 'Total Sales',
color = 'Region') +
theme_minimal()
