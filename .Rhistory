ggplot(data = new_baseball, aes(x = weight)) +
geom_histogram(fill = "orange") +
labs(title = "Histogram of Player Weights",
y = "Weight in Pounds",x="Frequency")
ggplot(data = new_baseball, aes(x = weight),bins=14) +
geom_histogram(fill = "orange") +
labs(title = "Histogram of Player Weights",
y = "Weight in Pounds",x="Frequency")
ggplot(data = new_baseball, aes(x = weight)) +
geom_histogram(fill = "orange",bins=14) +
labs(title = "Histogram of Player Weights",
y = "Weight in Pounds",x="Frequency")
# histogram
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
title(main = "Histogram of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
#using ggplot
ggplot(data = new_baseball, aes(x = weight)) +
geom_histogram(fill = "orange",bins=14) +
labs(title = "Histogram of Player Weights",
y = "Weight in Pounds",x="Frequency")
# histogram
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
title(main = "Histogram of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
#using ggplot
ggplot(data = new_baseball, aes(x = weight)) +
geom_histogram(fill = "orange",bins=14) +
labs(title = "Histogram of Player Weights",
y = "Weight in Pounds",x="Frequency")
# histogram
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
title(main = "Histogram of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
# histogram
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
title(main = "Histogram of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
# histogram
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
title(main = "Histogram of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
#using ggplot
ggplot(data = new_baseball, aes(x = weight)) +
geom_histogram(fill = "orange",bins=14) +
labs(title = "Histogram of Player Weights",
y = "Weight in Pounds",x="Frequency")
library(ezids)
library(ggplot2)
baseball = read.csv('C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW3/BaseballHeightWeight.csv')
baseball
str(baseball)
head(baseball,5)
tail(baseball,3)
colnames(baseball)
colnames(baseball)[4:6] <- c("height", "weight", "age")
colnames(baseball)
head(baseball,2)
#xkablesummary(baseball[4:6], title = "Five number summary")
summary(baseball[4:6])
na_weight <- is.na(baseball['weight'])
anomalies <- subset(baseball, na_weight)
anomalies
new_baseball<-subset(baseball, !na_weight)
new_baseball
summary(new_baseball)
# boxplot
boxplot(new_baseball['weight'],col="orange",ylab="Weight in pounds")
title(main = "Boxplot of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
#using ggplot
ggplot(data = new_baseball, aes(y = weight)) +
geom_boxplot(fill = "orange") +
labs(title = "Boxplot of Player Weights",
y = "Weight in Pounds")
# histogram
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency")
title(main = "Histogram of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
#using ggplot
ggplot(data = new_baseball, aes(x = weight)) +
geom_histogram(fill = "orange",bins=14) +
labs(title = "Histogram of Player Weights",
y = "Weight in Pounds",x="Frequency")
View(baseball)
#scatter plot bw height and weight
ggplot(data = new_baseball, aes(x = weight,y=height,color=team)) +
geom_scatter(fill = "orange",bins=14) +
labs(title = "Scatter plot of player Height vs Weight",
y = "Weight in Pounds",x="Height in Inches")
eight and weight
#scatter plot bw height and weight
ggplot(data = new_baseball, aes(x = weight,y=height,color=team)) +
geom_scatterplot(fill = "orange",bins=14) +
labs(title = "Scatter plot of player Height vs Weight",
y = "Weight in Pounds",x="Height in Inches")
#scatter plot bw height and weight
ggplot(data = new_baseball, aes(x = weight, y = height, color = team)) +
geom_point() +
labs(title = "Scatter plot of Player Height vs Weight",
x = "Weight in Pounds",
y = "Height in Inches")
View(new_baseball)
#scatter plot bw height and weight
ggplot(data = new_baseball, aes(x = weight, y = height, color = Team)) +
geom_point() +
labs(title = "Scatter plot of Player Height vs Weight",
x = "Weight in Pounds",
y = "Height in Inches")
count(new_baseball$Team)
summary(new_baseball$Team)
#scatter plot bw height and weight
ggplot(data = new_baseball, aes(x = weight, y = height, color = Team)) +
geom_point() +
labs(title = "Scatter plot of Player Weight vs Height",
x = "Weight in Pounds",
y = "Height in Inches")
#scatter plot bw height and weight
ggplot(data = new_baseball, aes(y = weight, x = height, color = Team)) +
geom_point() +
labs(title = "Scatter plot of Player Height vs Weight",
y = "Weight in Pounds",
x = "Height in Inches")
corr(new_baseball$height,new_baseball$weight)
cor(new_baseball$height,new_baseball$weight)
#scatter plot bw height and weight colored by age
ggplot(data = new_baseball, aes(y = weight, x = height, color = age)) +
geom_point() +
labs(title = "Scatter plot of Player Height vs Weight",
y = "Weight in Pounds",
x = "Height in Inches")
View(new_baseball)
wash_players=subset(new_baseball,new_baseball$Team='WAS')
wash_players <- subset(new_baseball, Team == 'WAS')
head(wash_players, 10)
wash_28 <-subset(new_baseball,Team=='Was',age>28)
head(wash_28,10)
wash_28 <-subset(new_baseball,Team=='Was',age>18)
head(wash_28,10)
wash_28 <- subset(new_baseball, Team == 'WAS' & age > 28)
head(wash_28,10)
print(nrow(wash_28))
wash_28 <- subset(new_baseball, Team == 'WAS' & age > 28)
head(wash_28,10)
print(nrow(wash_28))
# Question 5: Summary statistics.
**We can use the summary function to give us an overview of the summary statistics in the data frame**
# histogram
hist(new_baseball$weight, col = "orange", xlab = "Weight in pounds", ylab = "Frequency",title = "Histogram of Player Weights")
legend("topright", legend = "Weight", fill = "orange")
View(wash_28)
View(baseball)
library(devtools)
devtools::install_github("physicsland/ezids")
remove.packages("ezids")
devtools::install_github("physicsland/ezids")
devtools::install_github("physicsland/ezids")
devtools::install_github("physicsland/ezids")
remove.packages(ezids)
devtools::install_github("physicsland/ezids")
devtools::install_github("physicsland/ezids")
library(ezids)
ezids
?ezids
??ezids
library(ezids)
devtools::install_github("physicsland/ezids")
1.3/root(10)
1.3/sqrt(10)
# Some of common RMD options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, message = F)
# Can globally set option for number display format.
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
titanic=read.csv("C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW8/Titanic.csv")
titanic=read.csv("C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW9/Titanic.csv")
str(titanic)
descrive(titanic)
titanic=read.csv("C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW9/Titanic.csv")
str(titanic)
describe(titanic)
titanic=read.csv("C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW9/Titanic.csv")
str(titanic)
summary(titanic)
cat(sum(is.na(titanic$age))
cat(sum(is.na(titanic$age)))
View(titanic)
titanic.columns
titanic.columns()
titanic$columns
colnames(titanic)
install.packages(c("caret", "pROC", "e1071"))
predictions
predictions <- predict(model, newdata = titanic, type = "response")
model <- glm(survived ~ age + pclass, data = titanic, family = binomial)
summary(model)
predictions <- predict(model, newdata = titanic, type = "response")
# Convert predicted probabilities to binary (0 or 1)
predicted_class <- ifelse(predictions > 0.5, 1, 0)
# Create confusion matrix
conf_matrix <- confusionMatrix(data = predicted_class, reference = titanic$survived)
library(ezids)
library(ggplot2)
library(caret)
library(pROC)
library(e1071)
titanic=read.csv("C:/Users/saira/OneDrive/Desktop/GWU Courses/Intro to DS/Homework Assignments/HW9/Titanic.csv")
titanic<-subset(titanic, !is.na(age))
titanic$survived <- factor(titanic$survived)
titanic$pclass <- factor(titanic$pclass)
titanic$sex <- factor(titanic$sex)
titanic$sibsp <- factor(titanic$sibsp)
titanic$parch <- factor(titanic$parch)
titanic$embarked <- factor(titanic$embarked)
model <- glm(survived ~ age + pclass, data = titanic, family = binomial)
summary(model)
predictions <- predict(model, newdata = titanic, type = "response")
# Convert predicted probabilities to binary (0 or 1)
predicted_class <- ifelse(predictions > 0.5, 1, 0)
# Create confusion matrix
conf_matrix <- confusionMatrix(data = predicted_class, reference = titanic$survived)
View(titanic)
predicted_class <- factor(predicted_class, levels = levels(factor(titanic$survived)))
conf_matrix <- confusionMatrix(data = predicted_class, reference = titanic$survived)
# Display confusion matrix
print(conf_matrix)
# Calculate F1 score
f1_score <- posPredValue(conf_matrix) * sensitivity(conf_matrix) * 2 / (posPredValue(conf_matrix) + sensitivity(conf_matrix))
View(conf_matrix)
View(conf_matrix)
View(conf_matrix)
View(conf_matrix)
View(model)
View(conf_matrix)
conf_matrix[1,1]
View(conf_matrix)
conf_matrix$table[1,1]
library(ezids)
library(ggplot2)
library(dplyr)
library(tidyr)
games=read.csv("Video games sales.csv")
setwd("C:/Users/saira/OneDrive/Documents/GitHub/Intro-to-DS-Group-6")
library(ezids)
library(ggplot2)
library(dplyr)
library(tidyr)
games=read.csv("Video games sales.csv")
head(games,5)
games<-na.omit(games)
unique(games$Rating)
games$Rating <- ifelse( games$Rating== "", NA,games$Rating )
unique(games$Rating)
games<-subset(games,games$Rating!="NA")
games<-subset(games,games$Year_of_Release!="N/A")
nrow(games)
outlierKD2(games,Global_Sales,rm=FALSE,hist=TRUE,boxplt=TRUE,qqplt=TRUE)
games_final= outlierKD2(games,Global_Sales,rm=TRUE,hist=FALSE)
games_final<-na.omit(games_final)
library(reshape2)
games_final_long <- melt(games_final, id.vars = 'year_of_release', measure.vars = c('NA_Sales', 'JP_Sales', 'EU_Sales'))
View(games_final)
View(games_final)
games_final_long <- melt(games_final, id.vars = 'Year_of_Release', measure.vars = c('NA_Sales', 'JP_Sales', 'EU_Sales'))
# Plot the sales data
ggplot(games_final_long, aes(x = Year_of_Release, y = value, color = variable)) +
geom_line() +
labs(title = 'Sales by Region Over Time',
x = 'Year of Release',
y = 'Sales',
color = 'Region') +
theme_minimal()
library(reshape2)
agg_data <- games_final %>%
group_by(Year_of_Release) %>%
summarise(NA_Sales = sum(NA_Sales), JP_Sales = sum(JP_Sales), EU_Sales = sum(EU_Sales))
# Melt the aggregated dataframe to long format
agg_data_long <- melt(agg_data, id.vars = 'Year_of_Release', measure.vars = c('NA_Sales', 'JP_Sales', 'EU_Sales'))
# Plot the aggregated sales data
ggplot(agg_data_long, aes(x = Year_of_Release, y = value, color = variable)) +
geom_line() +
labs(title = 'Total Sales by Region Over Time',
x = 'Year of Release',
y = 'Total Sales',
color = 'Region') +
theme_minimal()
agg_data <- games_final %>%
group_by(Year_of_Release) %>%
summarise(NA_Sales = sum(NA_Sales), JP_Sales = sum(JP_Sales), EU_Sales = sum(EU_Sales))
# Melt the aggregated dataframe to long format
agg_data_long <- tidyr::gather(agg_data, key = 'Region', value = 'Sales', -Year_of_Release)
# Plot the aggregated sales data
ggplot(agg_data_long, aes(x = Year_of_Release, y = Sales, color = Region, group = Region)) +
geom_line() +
labs(title = 'Total Sales by Region Over Time',
x = 'Year of Release',
y = 'Total Sales',
color = 'Region') +
theme_minimal()
install.packages(c("agricolae", "BSDA", "bslib", "credentials", "crosstalk", "curl", "dbplyr", "dplyr", "DT", "evaluate", "fansi", "FielDHub", "foreign", "gert", "ggplot2", "ggthemes", "htmltools", "htmlwidgets", "httpuv", "httr2", "knitr", "lattice", "lifecycle", "lme4", "lubridate", "markdown", "Matrix", "MatrixModels", "minqa", "openssl", "pkgload", "plotly", "pls", "plyr", "prettyunits", "pROC", "R.utils", "ragg", "raster", "RcppEigen", "rlang", "rmarkdown", "rpart", "rprojroot", "shiny", "sp", "stringi", "stringr", "svglite", "systemfonts", "terra", "testthat", "textshaping", "tinytex", "utf8", "vctrs", "vroom", "waldo", "withr", "xfun"))
# Load necessary libraries
library(ggplot2)
library(dplyr)
# Read the CSV file
data <- read.csv("/Users/amitsubedi/Documents/GitHub/Intro-to-DS-Group-6/Video games sales.csv")
data <- select(data, -Critic_Score, -Developer)
# Loop through each column to analyze its relationship with 'User Score'
for (col in names(data)) {
if (col != "User_Score" & is.numeric(data[[col]])) {
plot <- ggplot(data, aes_string(x=col, y="User_Score")) +
geom_point(alpha=0.5) +
theme_minimal() +
ggtitle(paste("User Score vs", col)) +
xlab(col) +
ylab("User Score")
print(plot)
}
}
library(ggplot2)
library(dplyr)
library(GGally)
install.packages('GGally')
library(ggplot2)
library(dplyr)
library(GGally)
data <- select(data, -Critic_Score, -Developer)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(GGally)
print(colnames(data))
data <- dplyr::select(data, -Critic_Score, -Developer) # Adjust the column names as per your CSV
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(GGally)
data <- read.csv("/Users/amitsubedi/Documents/GitHub/Intro-to-DS-Group-6/Video games sales.csv")
print(colnames(data))
data <- dplyr::select(data, -Critic_Score, -Developer) # Adjust the column names as per your CSV
data$User_Score <- as.numeric(as.character(data$User_Score)) # Adjust the column name as per your CSV
summary(data)
ggpairs(data, columns = c("User_Score", names(data)[sapply(data, is.numeric)])) # Adjust the column name as per your CSV
library(ggplot2)
library(dplyr)
library(GGally)
data <- read.csv("/Users/amitsubedi/Documents/GitHub/Intro-to-DS-Group-6/Video games sales.csv")
data <- select(data, -Critic_Score, -Developer)
data$User_Score <- as.numeric(as.character(data$User_Score))
summary(data)
ggpairs(data, columns = c("User_Score", names(data)[sapply(data, is.numeric)]))
library(ggplot2)
library(dplyr)
library(GGally)
data <- read.csv("/Users/amitsubedi/Documents/GitHub/Intro-to-DS-Group-6/Video games sales.csv")
data <- dplyr::select(data, -Critic_Score, -Developer)
data$User_Score <- as.numeric(as.character(data$User_Score))
numeric_columns <- sapply(data, is.numeric)
data_numeric <- data[, numeric_columns]
# Summary of the data
summary(data_numeric)
# Pairwise scatter plots for all numeric variables
ggpairs(data_numeric, columns = c("User_Score", names(data_numeric)))
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(GGally)
data <- read.csv("/Users/amitsubedi/Documents/GitHub/Intro-to-DS-Group-6/Video games sales.csv")
print(colnames(data))
data <- dplyr::select(data, -Critic_Score, -Developer) # Adjust the column names as per your CSV
data$User_Score <- as.numeric(as.character(data$User_Score)) # Adjust the column name as per your CSV
summary(data)
ggpairs(data, columns = c("User_Score", names(data)[sapply(data, is.numeric)])) # Adjust the column name as per your CSV
install.packages("tidyr")
install.packages("tidyr")
install.packages("corrplot")
install.packages("naniar")
library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(GGally)
library(naniar)
video_games <- read.csv("/Users/amitsubedi/Documents/GitHub/Intro-to-DS-Group-6/Video games sales.csv")
data <- read.csv()
library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(GGally)
library(naniar)
video_games <- read.csv("/Users/amitsubedi/Documents/GitHub/Intro-to-DS-Group-6/Video games sales.csv")
video_games <- video_games %>%
mutate(User_Score = as.numeric(replace(User_Score, User_Score == "tbd", NA)))
summary(video_games)
hist(video_games$Global_Sales, main = "Distribution of Global Sales", xlab = "Global Sales")
boxplot(video_games$User_Score, main = "Boxplot for User Score")
# Correlation Analysis
## Correlation matrix excluding 'Critic_Score' and 'Developer'
numerical_data <- video_games %>% select_if(is.numeric) %>% select(-Critic_Score)
correlation_matrix <- cor(numerical_data, use = "complete.obs")
corrplot(correlation_matrix, method = "circle")
# Visualizing Missing Values
gg_miss_var(video_games)
# Scatterplots and Bivariate Analysis
## Scatterplot of User_Score vs. Global_Sales
ggplot(video_games, aes(x = User_Score, y = Global_Sales)) +
geom_point() +
labs(title = "User Score vs Global Sales", x = "User Score", y = "Global Sales")
# EDA Flowchart
## Note: This would typically be a separate diagram or a conceptual outline
# Print EDA Flowchart steps
cat("EDA Flowchart Steps:\n",
"1. Data Cleaning and Preparation\n",
"2. Summary Statistics\n",
"3. Examine Data Distribution\n",
"4. Outlier Detection\n",
"5. Correlation Analysis\n",
"6. Visualizing Missing Values\n",
"7. Scatterplots and Bivariate Analysis\n")
library(ggplot2)
library(dplyr)
library(tidyr)
# Read the CSV file
video_games <- read.csv("path/to/your/Video games sales.csv")
library(ggplot2)
library(dplyr)
library(tidyr)
video_games$User_Score <- as.numeric(as.character(video_games$User_Score))
video_games$User_Score[is.na(video_games$User_Score)] <- mean(video_games$User_Score, na.rm = TRUE)
ggplot(video_games, aes(x = User_Score)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
labs(title = "Histogram of User Scores", x = "User Score", y = "Frequency")
ggplot(video_games, aes(x = Global_Sales)) +
geom_histogram(binwidth = 1, fill = "green", color = "black") +
labs(title = "Histogram of Global Sales", x = "Global Sales", y = "Frequency")
ggplot(video_games, aes(x = User_Score, y = Global_Sales)) +
geom_point() +
labs(title = "User Score vs Global Sales", x = "User Score", y = "Global Sales")
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(tidyr)
# Data Preparation
video_games$User_Score <- as.numeric(replace(video_games$User_Score, video_games$User_Score == "tbd", NA))
video_games_subset <- video_games %>%
select(User_Score, NA_Sales, EU_Sales, Global_Sales, Critic_Count, Rating)
# Histogram for User_Score
ggplot(video_games_subset, aes(x = User_Score)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "black") +
labs(title = "Histogram of User Score", x = "User Score", y = "Count")
## For NA_Sales, EU_Sales, and Global_Sales
ggplot(video_games_subset, aes(x = NA_Sales)) +
geom_histogram(binwidth = 1, fill = "green", color = "black") +
labs(title = "Histogram of NA Sales", x = "NA Sales", y = "Count")
ggplot(video_games_subset, aes(x = EU_Sales)) +
geom_histogram(binwidth = 1, fill = "red", color = "black") +
labs(title = "Histogram of EU Sales", x = "EU Sales", y = "Count")
ggplot(video_games_subset, aes(x = Global_Sales)) +
geom_histogram(binwidth = 1, fill = "purple", color = "black") +
labs(title = "Histogram of Global Sales", x = "Global Sales", y = "Count")
## For Critic_Count
ggplot(video_games_subset, aes(x = Critic_Count)) +
geom_histogram(binwidth = 5, fill = "orange", color = "black") +
labs(title = "Histogram of Critic Count", x = "Critic Count", y = "Count")
# Scatterplots to examine relationships
## User_Score vs NA_Sales
ggplot(video_games_subset, aes(x = User_Score, y = NA_Sales)) +
geom_point() +
labs(title = "User Score vs NA Sales", x = "User Score", y = "NA Sales")
library(ggplot2)
library(dplyr)
data <- read.csv("/Users/amitsubedi/Documents/GitHub/Intro-to-DS-Group-6/Video games sales.csv")
data <- select(data, -Critic_Score, -Developer)
for (col in names(data)) {
if (col != "User_Score" & is.numeric(data[[col]])) {
plot <- ggplot(data, aes_string(x=col, y="User_Score")) +
geom_point(alpha=0.5) +
theme_minimal() +
ggtitle(paste("User Score vs", col)) +
xlab(col) +
ylab("User Score")
print(plot)
}
}
library(ggplot2)
library(dplyr)
library(tidyr)
library(corrplot)
library(GGally)
library(naniar)
video_games <- read.csv("/Users/amitsubedi/Documents/GitHub/Intro-to-DS-Group-6/Video games sales.csv")
video_games <- video_games %>%
mutate(User_Score = as.numeric(replace(User_Score, User_Score == "tbd", NA)))
summary(video_games)
hist(video_games$Global_Sales, main = "Distribution of Global Sales", xlab = "Global Sales")
boxplot(video_games$User_Score, main = "Boxplot for User Score")
numerical_data <- video_games %>% select_if(is.numeric) %>% select(-Critic_Score)
correlation_matrix <- cor(numerical_data, use = "complete.obs")
corrplot(correlation_matrix, method = "circle")
gg_miss_var(video_games)
ggplot(video_games, aes(x = User_Score, y = Global_Sales)) +
geom_point() +
labs(title = "User Score vs Global Sales", x = "User Score", y = "Global Sales")
cat("EDA Flowchart Steps:\n",
"1. Data Cleaning and Preparation\n",
"2. Summary Statistics\n",
"3. Examine Data Distribution\n",
"4. Outlier Detection\n",
"5. Correlation Analysis\n",
"6. Visualizing Missing Values\n",
"7. Scatterplots and Bivariate Analysis\n")
