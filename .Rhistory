ztest95
ztest99 = z.test(x=mlbsample$height, sigma.x = 2.31, conf.level=0.99 )
ztest99
ztest50 = z.test(x=mlbsample$height, sigma.x = 2.31, conf.level=0.50 )
ztest50
names(ztest99)
ztest99$conf.int
# ztest99$alternative
ztest99$estimate
ztest99$statistic
ztest99$method
# etc etc
mean.height
ztest99$conf.int
ztest95$conf.int
ztest50$conf.int
# t.test is included in the basic R package 'stats'
ttest95 = t.test(x=mlbsample$height) # default conf.level = 0.95
ttest95
ttest99 = t.test(x=mlbsample$height, conf.level=0.99 )
ttest99
ttest50 = t.test(x=mlbsample$height, conf.level=0.50 )
ttest50
names(ttest99)
ttest99$conf.int
ttest99$alternative
ttest99$estimate
mean.height
ztest99$conf.int
ttest99$conf.int
mean.height
ztest95$conf.int
ttest95$conf.int
mean.height
ttest50$conf.int
ztest50$conf.int
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = "markup", message = F)
# knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
getwd()
# mlb <- data.frame(read.csv("BaseballHeightWeight.csv", header = TRUE))
mlb <- read.csv("BaseballHeightWeight.csv", header = TRUE)
str(mlb)
head(mlb)
colnames(mlb)[4:6]=c("height","weight","age")
# The line above produces no output. To see the changes, use str() or head()
mean.height = mean(mlb$height, na.rm = TRUE);
mean.weight = mean(mlb$weight, na.rm = TRUE);
set.seed(321) # just so that everyone have the same sample for comparison
mlbsample = mlb[ sample(nrow(mlb),30), ]
str(mlbsample)
head(mlbsample)
format(mean(mlbsample$height), digits=5)
format(mean(mlbsample$weight, na.rm = TRUE), digits=5)
gre_mean <- mean(df$gre)
gre_sd <- sd(df$gre)
gre_n <- length(df$gre)
gpa_mean <- mean(df$gpa)
gpa_sd <- sd(df$gpa)
gpa_n <- length(df$gpa)
gre_test80 = t.test(x=df$gre, conf.level=0.80)
gre_test99 = t.test(x=df$gre, conf.level=0.99)
gpa_test80 = t.test(x=df$gpa, conf.level=0.80)
gpa_test99 = t.test(x=df$gpa, conf.level=0.99)
gre_mean <- mean(df$gre)
gre_sd <- sd(df$gre)
gre_n <- length(df$gre)
gpa_mean <- mean(df$gpa)
gpa_sd <- sd(df$gpa)
gpa_n <- length(df$gpa)
gre_test80 = t.test(x=df$gre, conf.level=0.80)
gre_test99 = t.test(x=df$gre, conf.level=0.99)
gre_test80
gre_test99
gpa_test80 = t.test(x=df$gpa, conf.level=0.80)
gpa_test99 = t.test(x=df$gpa, conf.level=0.99)
gpa_test80
gpa_test99
gre_sub=subset(df$gre,df$admit=0)
gre_sub=subset(df$gre,df$admit==0)
gre_sub
gre_rej=subset(df$gre,df$admit==0)
gre_adm=subset(df$gre,df$admit==1)
gre_adm
library(ggplot2)
gre_rej=subset(df$gre,df$admit==0)
gre_adm=subset(df$gre,df$admit==1)
gre_rej80 = t.test(x=gre_rej, conf.level=0.80)
gre_adm80 = t.test(x=gre_adm, conf.level=0.80)
gre_rej80
gre_adm80
gre_rej99 = t.test(x=gre_rej, conf.level=0.99)
gre_adm99 = t.test(x=gre_adm, conf.level=0.99)
gre_rej99
gre_adm99
vector1 = c(1,2,3)
vector2 = c(4,5,6)
vector12 = cbind(vector1,vector2)
vector12
vector12 = rbind(vector1,vector2)
vector12
vector1 = c(1,2,3)
vector2 = c(4,5,6)
vector12 = cbind(vector1,vector2)
vector12
x=cbind(a,b)
cbind(a,b)
#create two vectors
a <- c(1, 3, 3, 4, 5)
b <- c(7, 7, 8, 3, 2)
#cbind the two vectors into a matrix
new_matrix <- cbind(a, b)
#view matrix
new_matrix
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
# knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
#Start with individual variables of Height Weight and Age
hist(mlb$height, main="Histogram of baseball player Height", xlab="Height (inches)", col = 'blue' )
library(ggplot2)
ggplot(data=mlb, aes(height)) +
geom_histogram(breaks=seq(66, 86, by = 1),
col="red",
fill="blue",
alpha = .7) + # opacity
labs(x="height (in)", y="Frequency") +
labs(title="Baseball player height histogram using `ggplot`")
#Start with individual variables of Height Weight and Age
hist(mlb$height, main="Histogram of baseball player Height", xlab="Height (inches)", col = 'blue' )
library(ggplot2)
ggplot(data=mlb, aes(height)) +
geom_histogram(breaks=seq(66, 86, by = 1),
col="red",
fill="blue",
alpha = .7) + # opacity
labs(x="height (in)", y="Frequency") +
labs(title="Baseball player height histogram using `ggplot`")
qqnorm(mlb$height, main="Q-Q plot of Baseball player heights")
qqline(mlb$height)
shapiro.test(mlb$height) # Shapiro-Wilk test for normality
ks.test(mlb$height,pnorm) # Kolmogorov-Smirnov Tests against normal distribution
pnorm(z80height) # pnorm to find the probability
z80height <- (80-mean.height)/sd.height
sd.height <- sd(mlb$height)
mean.height <- mean(mlb$height)
# sd.weight <- sd(mlb$weight)   # error if there are N/A values
sd.weight <- sd(mlb$weight, na.rm = TRUE)
mean.weight <- mean(mlb$weight, na.rm = TRUE)
mean.weight
sd.weight
sd.height
z80height <- (80-mean.height)/sd.height
z80height
pnorm(z80height) # pnorm to find the probability
qnorm(pnorm(z80height)) # qnorm to find the z-value, the inverse of pnorm.  In this case, the answer is just z80height
mlb$zheight = scale(mlb$height)
mlb$zweight = scale(mlb$weight)
# The package "ezids" (EZ Intro to Data Science) includes a lot of the helper functions we developed for the course.
# Some of the frequently used functions are loadPkg(), xkabledply(), xkablesummary(), uzscale(), etc.
# Once installed, load the library.
library(ezids)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
# knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
# getwd()
# mlb <- data.frame(read.csv("BaseballHeightWeight.csv", header = TRUE))
mlb <- data.frame(read.csv("BaseballHeightWeight.csv", header = TRUE))
str(mlb)
head(mlb)
colnames(mlb)[4:6]=c("height","weight","age")
# The line above produces no output. To see the changes, use str() or head()
xkabledplyhead(mlb, title = "Header rows for mlb dataset")
#Start with individual variables of Height Weight and Age
hist(mlb$height, main="Histogram of baseball player Height", xlab="Height (inches)", col = 'blue' )
library(ggplot2)
ggplot(data=mlb, aes(height)) +
geom_histogram(breaks=seq(66, 86, by = 1),
col="red",
fill="blue",
alpha = .7) + # opacity
labs(x="height (in)", y="Frequency") +
labs(title="Baseball player height histogram using `ggplot`")
boxplot(mlb$height, main="Boxplot of baseball player height", ylab="height (inches)", col = 'red' )
ggplot(mlb, aes(y=height)) +
geom_boxplot() +
geom_boxplot( colour="orange", fill="#7777cc", outlier.colour="red", outlier.shape=8, outlier.size=4) +
labs(title="Baseball player height boxplot using `ggplot`", x="", y = "height (in)")
qqnorm(mlb$height, main="Q-Q plot of Baseball player heights")
qqline(mlb$height)
shapiro.test(mlb$height) # Shapiro-Wilk test for normality
ks.test(mlb$height,pnorm) # Kolmogorov-Smirnov Tests against normal distribution
sd.height <- sd(mlb$height)
mean.height <- mean(mlb$height)
# sd.weight <- sd(mlb$weight)   # error if there are N/A values
sd.weight <- sd(mlb$weight, na.rm = TRUE)
mean.weight <- mean(mlb$weight, na.rm = TRUE)
mean.weight
sd.weight
sd.height
var(mlb$height, na.rm = T)
mean(mlb$height, na.rm = T)
sd(mlb$height, na.rm = T)
z80height <- (80-mean.height)/sd.height
z80height
pnorm(z80height) # pnorm to find the probability
qnorm(pnorm(z80height)) # qnorm to find the z-value, the inverse of pnorm.  In this case, the answer is just z80height
mlb$zheight
mlb$zheight = scale(mlb$height)
mlb$zheight
mlb$zweight = scale(mlb$weight)
mean(mlb$zheight, na.rm = TRUE)
sd(mlb$zheight, na.rm = TRUE)
summary(mlb$zheight)
summary(mlb$zweight)
mlbclean = outlierKD2(mlb, height, rm = TRUE, boxplt = TRUE, qqplt = TRUE)
boxplot(mlb$height, main="Boxplot of baseball player height", ylab="height (inches)", col = 'red' )
ggplot(mlb, aes(y=height)) +
geom_boxplot() +
geom_boxplot( colour="orange", fill="#7777cc", outlier.colour="red", outlier.shape=8, outlier.size=4) +
labs(title="Baseball player height boxplot using `ggplot`", x="", y = "height (in)")
ggplot(mlb,aes(y=height))+geom_boxplot(colour="orange",fill="green",outlier.colour = "violet",oulier.size=5)+labs(title = "xyz",x="",y="height")
boxplot(mlb$height, main="Boxplot of baseball player height", ylab="height (inches)", col = 'red' )
ggplot(mlb, aes(y=height)) +
geom_boxplot() +
geom_boxplot( colour="orange", fill="#7777cc", outlier.colour="red", outlier.shape=8, outlier.size=4) +
labs(title="Baseball player height boxplot using `ggplot`", x="", y = "height (in)")
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = "markup", message = F)
# knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
pnorm(-1.5) # to find out what percentile you are at when you exam comes in at 1.5 sd below mean
pnorm(55,mean=70,sd=10) # same as above, using raw score instead of z-score.
qnorm(.75) # to find what critical z-value will contain 50% of data points
dnorm(-1.2) # probability density function at -1.2
dnorm(1.2) # same as above, since symmetric
rnorm(3) # create 3 random numbers using normal dist, with mu=0, sigma=1
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = "markup", message = F)
# knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
loadPkg("BSDA") # for z.test
names(ztest99)
ztest99$conf.int
# ztest99$alternative
ztest99$estimate
ztest99$statistic
ztest99$method
# etc etc
mean.height
ztest99$conf.int
ztest95$conf.int
ztest50$conf.int
mean.height
ztest99$conf.int
ttest99$conf.int
mean.height
ztest95$conf.int
ttest95$conf.int
mean.height
ttest50$conf.int
ztest50$conf.int
# t.test is included in the basic R package 'stats'
ttest95 = t.test(x=mlbsample$height) # default conf.level = 0.95
ttest95
ttest99 = t.test(x=mlbsample$height, conf.level=0.99 )
ttest99
ttest50 = t.test(x=mlbsample$height, conf.level=0.50 )
ttest50
names(ttest99)
ttest99$conf.int
ttest99$alternative
ttest99$estimate
mean.height
ztest99$conf.int
ttest99$conf.int
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
# knitr::opts_chunk$set(warning = F, results = "markup", message = F)
# knitr::opts_chunk$set(warning = F, results = "hide", message = F)
# knitr::opts_chunk$set(include = F)
# knitr::opts_chunk$set(echo = TRUE)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
str(mlbclean)
summary(mlbclean)
# some of common options (and the defaults) are:
# include=T, eval=T, echo=T, results='hide'/'asis'/'markup',..., collapse=F, warning=T, message=T, error=T, cache=T, fig.width=6, fig.height=4, fig.dim=c(6,4) #inches, fig.align='left'/'center','right',
knitr::opts_chunk$set(warning = F, results = "markup", message = F)
# knitr::opts_chunk$set(warning = F, results = "hide", message = F)
options(scientific=T, digits = 3)
# options(scipen=9, digits = 3)
# ‘scipen’: integer. A penalty to be applied when deciding to print numeric values in fixed or exponential notation.  Positive values bias towards fixed and negative towards scientific notation: fixed notation will be preferred unless it is more than ‘scipen’ digits wider.
# use scipen=999 to prevent scientific notation at all times
multinomdf$sum = multinomdf$"1" * 1 + multinomdf$"2" *2 + multinomdf$"3" * 3 + multinomdf$"4" *4 + multinomdf$"5" * 5 + multinomdf$"6" * 6
ndice = 2
trials = 1000 # simulated results
data.frame( t( rmultinom( n=trials, size = ndice, prob = rep(1/6,6) ) ) ) -> multinomdf # need to take the transpose
1:6 -> colnames(multinomdf)
plot2 <- barplot(colSums(multinomdf), xlab = "x", ylab = "Frequency") +
title(main="Frequency distribution for rolling dice") +
theme_bw()
multinomdf$sum = multinomdf$"1" * 1 + multinomdf$"2" *2 + multinomdf$"3" * 3 + multinomdf$"4" *4 + multinomdf$"5" * 5 + multinomdf$"6" * 6
library(ggplot2)
ggplot(data=multinomdf, aes(sum)) +
geom_histogram(breaks=seq(1, 12, by = 1),
col="red",
fill="blue",
alpha = .7) + # opacity
labs(x="sum", y="Frequency", title="Sum of dice rolled")
getwd()
setwd("C:/Users/srira/Documents/GitHub/Intro-to-DS-Group-6")
knitr::opts_chunk$set(echo = TRUE)
library(ezids)
library(ggplot2)
games=read.csv("Video games sales.csv")
head(games,5)
library(ezids)
library(ggplot2)
games=read.csv("Video games sales.csv")
head(games,5)
new_games=subset(games,is.na(games)==FALSE)
nrow(new_games)
library(ezids)
library(ggplot2)
games=read.csv("Video games sales.csv")
head(games,5)
games_na <- na.omit(games)
nrow(games_na)
nrow(games_na)
head(games,5)
nrow(games_na)
head(games_na,5)
sum(is.na(games_na$Critic_Count))
sum(is.na(games_na$Critic_Count))
sum(is.na(games_na$Critic_Score))
sum(is.na(games_na$Critic_Count))
sum(is.na(games_na$Critic_Score))
sum(is.na(games_na$Developer))
sum(is.na(games_na$Critic_Count))
sum(is.na(games_na$Critic_Score))
sum(is.na(games_na$Developer))
sum(is.na(games_na$User_Count))
sum(is.na(games_na$User_Score))
sum(is.na(games_na$Critic_Count))
sum(is.na(games_na$Critic_Score))
sum(is.na(games_na$Developer))
sum(is.na(games_na$User_Count))
sum(is.na(games_na$User_Score))
sum(is.na(games_na$Rating))
sum(is.na(games_na$Critic_Count))
sum(is.na(games_na$Critic_Score))
sum(is.na(games_na$Developer))
sum(is.na(games_na$User_Count))
sum(is.na(games_na$User_Score))
sum(is.na(games_na$Rating))
nrow(games)
library(ezids)
library(ggplot2)
games=read.csv("Video games sales.csv")
head(games,5)
nrow(games)
str(games)
unique(games$Platform) #need to convert platform into factor 27 different platforms
unique(games$Genre)
unique(games$Rating)
length(unique(games$Name))#.  #11563 Names
length(unique(games$Platform)) #31 platforms
length(unique(games$Genre))  #13 genres
length(unique(games$Publisher)) #583 publishers
length(unique(games$Developer)) #1697 developers
length(unique(games$Rating)) #9 categories of rating
sum(is.na(games$Critic_Count)) #8582 null values
sum(is.na(games$Critic_Score))
sum(is.na(games$User_Count)) #9129 null values
sum(is.na(games$User_Score))
games<- na.omit(games)
library(readr)
Data_without_NAvalues <- read_csv("Data_without NAvalues.csv")
View(Data_without_NAvalues)
nrow(Data_without_NAvalues)
sum(is.na(games_na$Critic_Count))
sum(is.na(games_na$Critic_Score))
sum(is.na(games_na$Developer))
sum(is.na(games_na$User_Count))
sum(is.na(games_na$User_Score))
sum(is.na(games_na$Rating))
sum(is.na(games_na$Year_of_Release))
sum(is.na(games_na$Critic_Count))
sum(is.na(games_na$Critic_Score))
sum(is.na(games_na$Developer))
sum(is.na(games_na$User_Count))
sum(is.na(games_na$User_Score))
sum(is.na(games_na$Rating))
sum(is.na(games_na$Year_of_Release))
dim(games_na)
sum(is.na(games_na$Critic_Count))
sum(is.na(games_na$Critic_Score))
sum(is.na(games_na$Developer))
sum(is.na(games_na$User_Count))
sum(is.na(games_na$User_Score))
sum(is.na(games_na$Rating))
sum(is.na(games_na$Year_of_Release))
dim(games_na)
games_na
sum(is.na(games_na$Critic_Count))
sum(is.na(games_na$Critic_Score))
sum(is.na(games_na$Developer))
sum(is.na(games_na$User_Count))
sum(is.na(games_na$User_Score))
sum(is.na(games_na$Rating))
sum(is.na(games_na$Year_of_Release))
dim(games_na)
View(games_na)
games<-read.csv('Video games sales.csv')
nrow(games)
games<-na.omit(games)
unique(games$Rating)
games$Rating <- ifelse(games$Rating== "", NA,games$Rating )
unique(games$Rating)
games<-subset(games,games$Rating!="NA")
games<-subset(games,games$Year_of_Release!="N/A")
nrow(games)
library(ggplot2)
ggplot(games, aes(x = userscore)) +
geom_histogram(binwidth = 10, fill = "blue", color = "red", alpha = 0.7) +
ggtitle("Histogram of gre for Admitted Subset") +
theme_minimal()
library(ggplot2)
ggplot(games, aes(x = games$User_Score)) +
geom_histogram(binwidth = 10, fill = "blue", color = "red", alpha = 0.7) +
ggtitle("Histogram of gre for Admitted Subset") +
theme_minimal()
library(ggplot2)
ggplot(games, aes(x = games$User_Score)) +
geom_histogram(binwidth = 1, fill = "blue", color = "red", alpha = 0.7) +
ggtitle("Histogram of gre for Admitted Subset") +
theme_minimal()
library(ggplot2)
ggplot(games, aes(x = games$User_Score)) +
geom_histogram(binwidth = 0.8, fill = "blue", color = "red", alpha = 0.7) +
ggtitle("Histogram of gre for Admitted Subset") +
theme_minimal()
library(ggplot2)
ggplot(games, aes(x = games$User_Score)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "red", alpha = 0.7) +
ggtitle("Histogram of gre for Admitted Subset") +
theme_minimal()
library(ggplot2)
ggplot(games, aes(x = games$User_Score)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "red", alpha = 0.7) +
ggtitle("Histogram") +
theme_minimal()
library(ggplot2)
ggplot(games, aes(x = games$User_Score)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "red", alpha = 0.7) +
ggtitle("Histogram") +
theme_minimal()
ggplot(games, aes(y = games$User_Score))+geom_boxplot()
library(ggplot2)
ggplot(games, aes(x = games$User_Score)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "red", alpha = 0.7) +
ggtitle("Histogram") +
theme_minimal()
ggplot(games, aes(y = games$User_Score))+geom_boxplot()
qqplot(games$User_Score)
library(ggplot2)
ggplot(games, aes(x = games$User_Score)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "red", alpha = 0.7) +
ggtitle("Histogram") +
theme_minimal()
ggplot(games, aes(y = games$User_Score))+geom_boxplot()
qqplot(games,games$User_Score)
library(ggplot2)
ggplot(games, aes(x = games$User_Score)) +
geom_histogram(binwidth = 0.5, fill = "blue", color = "red", alpha = 0.7) +
ggtitle("Histogram") +
theme_minimal()
ggplot(games, aes(y = games$User_Score))+geom_boxplot()
qqnorm(games$User_Score)
qqline(games$User_Score)
